apiVersion: v1
kind: ServiceAccount
metadata:
  name: version-checker-sa
  namespace: migration-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: configmap-editor-role
  namespace: migration-system
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["version-config"]
    verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: version-checker-binding
  namespace: migration-system
subjects:
  - kind: ServiceAccount
    name: version-checker-sa
    namespace: migration-system
roleRef:
  kind: Role
  name: configmap-editor-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vjailbreak-version-checker
  namespace: migration-system
spec:
  schedule: "0 0 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 300
      template:
        spec:
          serviceAccountName: version-checker-sa
          restartPolicy: OnFailure
          containers:
            - name: version-checker
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  
                  check_internet() {
                    if ! curl -s --connect-timeout 10 --retry 2 --retry-delay 1 https://api.github.com > /dev/null; then
                      echo "No internet connection detected. Version check requires internet access."
                      exit 0
                    fi
                  }
                  
                  apk add --no-cache curl jq

                  if ! command -v kubectl &> /dev/null; then
                    if ! curl -LO "https://dl.k8s.io/release/v1.34.0/bin/linux/amd64/kubectl"; then
                      echo "Warning: Could not download kubectl. Version check requires kubectl."
                      exit 0
                    fi
                    chmod +x kubectl
                    mv kubectl /usr/local/bin/
                  fi

                  echo "Checking for latest version"
                  CURRENT_VERSION=$(kubectl get configmap version-config -n migration-system -o jsonpath='{.data.version}' || true)
                  
                  if [ -z "$CURRENT_VERSION" ]; then
                    echo "Error: 'version' key not found in ConfigMap. Exiting."
                    exit 0
                  fi
                  
                  echo "Current version: $CURRENT_VERSION"

                  check_internet

                  LATEST_TAG=$(curl -s --connect-timeout 15 --retry 2 --retry-delay 1 "https://api.github.com/repos/platform9/vjailbreak/tags" | jq -r '.[0].name' 2>/dev/null || true)

                  if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
                    echo "Warning: Could not fetch latest tag from GitHub."
                    exit 0
                  fi
                  echo "Latest tag on GitHub: $LATEST_TAG"

                  CURRENT_SEMVER=${CURRENT_VERSION#v}
                  LATEST_SEMVER=${LATEST_TAG#v}
                  HIGHEST_VERSION=$(printf "%s\n%s" "$CURRENT_SEMVER" "$LATEST_SEMVER" | sort -V | tail -n1)
                  if [ "$LATEST_SEMVER" != "$CURRENT_SEMVER" ] && [ "$HIGHEST_VERSION" == "$LATEST_SEMVER" ]; then
                    echo "New version found! Updating ConfigMap..."
                    PATCH_DATA="{\"data\":{\"upgradeAvailable\":\"true\",\"upgradeVersion\":\"$LATEST_TAG\"}}"
                    kubectl patch configmap version-config -n migration-system --type='merge' -p="$PATCH_DATA"
                    echo "ConfigMap 'version-config' updated successfully."
                  else
                    echo "You are on the latest version. No update needed."
                  fi

                  echo "Version Check Complete"