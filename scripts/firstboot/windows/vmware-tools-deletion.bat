
@echo off
REM Test script to verify the generated PowerShell matches the reference file
REM This does NOT execute the PowerShell script

REM Delete the file if it exists to start fresh
if exist "%~dp0vmware-tools-removal.ps1" del "%~dp0vmware-tools-removal.ps1"

REM Generate the PowerShell script line by line using append redirection
echo # VMware Tools Manual Removal Script > "%~dp0vmware-tools-removal.ps1"
echo # This script performs manual cleanup of VMware Tools from Windows machines >> "%~dp0vmware-tools-removal.ps1"
echo # Run as Administrator for full functionality >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo param( >> "%~dp0vmware-tools-removal.ps1"
echo     [string]$LogPath = "C:\VMware_Removal_Log.txt" >> "%~dp0vmware-tools-removal.ps1"
echo ) >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Function to log messages >> "%~dp0vmware-tools-removal.ps1"
echo function Write-Log { >> "%~dp0vmware-tools-removal.ps1"
echo     param([string]$Message, [string]$Level = "INFO") >> "%~dp0vmware-tools-removal.ps1"
echo     $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss" >> "%~dp0vmware-tools-removal.ps1"
echo     $logEntry = "[$timestamp] [$Level] $Message" >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Host $logEntry >> "%~dp0vmware-tools-removal.ps1"
echo     Add-Content -Path $LogPath -Value $logEntry >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "=== VMware Tools Manual Removal Started ===" >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Check if running as Administrator >> "%~dp0vmware-tools-removal.ps1"
echo if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "This script must be run as Administrator!" "ERROR" >> "%~dp0vmware-tools-removal.ps1"
echo     exit 1 >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Get current username for user-specific paths >> "%~dp0vmware-tools-removal.ps1"
echo $currentUser = $env:USERNAME >> "%~dp0vmware-tools-removal.ps1"
echo $allUsers = Get-ChildItem "C:\Users" -Directory | Where-Object { $_.Name -notmatch "^(Public|Default|All Users)$" } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Starting VMware Tools removal process..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 1: Delete VMware installation files >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 1: Removing VMware installation files..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo $vmwarePaths = @( >> "%~dp0vmware-tools-removal.ps1"
echo     "C:\Program Files\VMware", >> "%~dp0vmware-tools-removal.ps1"
echo     "C:\Program Files (x86)\VMware", >> "%~dp0vmware-tools-removal.ps1"
echo     "C:\Program Files\Common Files\VMware", >> "%~dp0vmware-tools-removal.ps1"
echo     "C:\Program Files (x86)\Common Files\VMware", >> "%~dp0vmware-tools-removal.ps1"
echo     "C:\ProgramData\VMware" >> "%~dp0vmware-tools-removal.ps1"
echo ) >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Add user-specific paths for all users >> "%~dp0vmware-tools-removal.ps1"
echo foreach ($user in $allUsers) { >> "%~dp0vmware-tools-removal.ps1"
echo     $userPath = "C:\Users\$($user.Name)\AppData\Local\VMware" >> "%~dp0vmware-tools-removal.ps1"
echo     $vmwarePaths += $userPath >> "%~dp0vmware-tools-removal.ps1"
echo     $userPath = "C:\Users\$($user.Name)\AppData\Roaming\VMware" >> "%~dp0vmware-tools-removal.ps1"
echo     $vmwarePaths += $userPath >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo foreach ($path in $vmwarePaths) { >> "%~dp0vmware-tools-removal.ps1"
echo     if (Test-Path $path) { >> "%~dp0vmware-tools-removal.ps1"
echo         try { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Removing directory: $path" >> "%~dp0vmware-tools-removal.ps1"
echo             Remove-Item -Path $path -Recurse -Force -ErrorAction Stop >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Successfully removed: $path" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo         catch { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Failed to remove $path : $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo     else { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Path not found (skipping): $path" >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 2: Remove VMware services from registry >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 2: Removing VMware services from registry..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo $vmwareServices = @( >> "%~dp0vmware-tools-removal.ps1"
echo     "vmci", "vm3dmp", "vmaudio", "vmhgfs", "VMMemCtl", "vmmouse",  >> "%~dp0vmware-tools-removal.ps1"
echo     "VMRawDisk", "VMTools", "vmusbmouse", "vmvss", "VMwareCAF", >> "%~dp0vmware-tools-removal.ps1"
echo     "VMwareCAFCommAmqpListener", "VMwareCAFManagementAgentHost" >> "%~dp0vmware-tools-removal.ps1"
echo ) >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo $servicesPath = "HKLM:\SYSTEM\CurrentControlSet\Services" >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo foreach ($service in $vmwareServices) { >> "%~dp0vmware-tools-removal.ps1"
echo     try { >> "%~dp0vmware-tools-removal.ps1"
echo         $servicePath = Join-Path $servicesPath $service >> "%~dp0vmware-tools-removal.ps1"
echo         if (Test-Path $servicePath) { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Removing service registry entry: $service" >> "%~dp0vmware-tools-removal.ps1"
echo             Remove-Item -Path $servicePath -Recurse -Force >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Successfully removed service: $service" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo         else { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Service registry entry not found: $service" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo     catch { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Failed to remove service $service : $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Remove additional VMware service patterns >> "%~dp0vmware-tools-removal.ps1"
echo try { >> "%~dp0vmware-tools-removal.ps1"
echo     $allServices = Get-ChildItem $servicesPath | Where-Object { $_.Name -like "*vmware*" -or $_.Name -like "*VMware*" } >> "%~dp0vmware-tools-removal.ps1"
echo     foreach ($service in $allServices) { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Removing additional VMware service: $($service.PSChildName)" >> "%~dp0vmware-tools-removal.ps1"
echo         Remove-Item -Path $service.PSPath -Recurse -Force >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo catch { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Error removing additional services: $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 3: Remove VMware.Inc from SOFTWARE registry >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 3: Removing VMware.Inc from SOFTWARE registry..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo $vmwareSoftwareKey = "HKLM:\SOFTWARE\VMware, Inc." >> "%~dp0vmware-tools-removal.ps1"
echo if (Test-Path $vmwareSoftwareKey) { >> "%~dp0vmware-tools-removal.ps1"
echo     try { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Removing VMware.Inc registry key" >> "%~dp0vmware-tools-removal.ps1"
echo         Remove-Item -Path $vmwareSoftwareKey -Recurse -Force >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Successfully removed VMware.Inc registry key" >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo     catch { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Failed to remove VMware.Inc registry key: $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo else { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "VMware.Inc registry key not found" >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Also check for other VMware registry entries >> "%~dp0vmware-tools-removal.ps1"
echo $otherVMwareKeys = @( >> "%~dp0vmware-tools-removal.ps1"
echo     "HKLM:\SOFTWARE\VMware", >> "%~dp0vmware-tools-removal.ps1"
echo     "HKLM:\SOFTWARE\WOW6432Node\VMware, Inc.", >> "%~dp0vmware-tools-removal.ps1"
echo     "HKLM:\SOFTWARE\WOW6432Node\VMware" >> "%~dp0vmware-tools-removal.ps1"
echo ) >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo foreach ($key in $otherVMwareKeys) { >> "%~dp0vmware-tools-removal.ps1"
echo     if (Test-Path $key) { >> "%~dp0vmware-tools-removal.ps1"
echo         try { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Removing additional VMware registry key: $key" >> "%~dp0vmware-tools-removal.ps1"
echo             Remove-Item -Path $key -Recurse -Force >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo         catch { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Failed to remove registry key $key : $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 4: Delete VMware drivers from System32\Drivers >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 4: Removing VMware drivers from System32\Drivers..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo $driversPath = "C:\Windows\System32\Drivers" >> "%~dp0vmware-tools-removal.ps1"
echo $vmwareDrivers = @( >> "%~dp0vmware-tools-removal.ps1"
echo     "vmci.sys", "vm3dmp.sys", "vmaudio.sys", "vmhgfs.sys", "vmmemctl.sys",  >> "%~dp0vmware-tools-removal.ps1"
echo     "vmmouse.sys", "vmrawdsk.sys", "vmtools.sys", "vmusbmouse.sys",  >> "%~dp0vmware-tools-removal.ps1"
echo     "vmvss.sys", "vsock.sys", "vmx_svga.sys" >> "%~dp0vmware-tools-removal.ps1"
echo ) >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo foreach ($driver in $vmwareDrivers) { >> "%~dp0vmware-tools-removal.ps1"
echo     $driverPath = Join-Path $driversPath $driver >> "%~dp0vmware-tools-removal.ps1"
echo     if (Test-Path $driverPath) { >> "%~dp0vmware-tools-removal.ps1"
echo         try { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Removing driver: $driver" >> "%~dp0vmware-tools-removal.ps1"
echo             Remove-Item -Path $driverPath -Force >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Successfully removed driver: $driver" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo         catch { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Failed to remove driver $driver : $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo     else { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Driver not found: $driver" >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Remove any additional VMware drivers >> "%~dp0vmware-tools-removal.ps1"
echo try { >> "%~dp0vmware-tools-removal.ps1"
echo     $additionalDrivers = Get-ChildItem $driversPath | Where-Object { $_.Name -like "*vmware*" -or $_.Name -like "*vm*.sys" } >> "%~dp0vmware-tools-removal.ps1"
echo     foreach ($driver in $additionalDrivers) { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Removing additional VMware driver: $($driver.Name)" >> "%~dp0vmware-tools-removal.ps1"
echo         Remove-Item -Path $driver.FullName -Force >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo catch { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Error removing additional drivers: $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 5: Remove VMware SVGA driver from Device Manager >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 5: Removing VMware SVGA driver from Device Manager..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo try { >> "%~dp0vmware-tools-removal.ps1"
echo     # Use PnPUtil to remove VMware drivers >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Attempting to remove VMware drivers using PnPUtil..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo     # Get all VMware-related drivers >> "%~dp0vmware-tools-removal.ps1"
echo     $pnpDrivers = & pnputil /enum-drivers | Select-String -Pattern "vmware" -Context 2 >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo     if ($pnpDrivers) { >> "%~dp0vmware-tools-removal.ps1"
echo         # Extract OEM names and remove drivers >> "%~dp0vmware-tools-removal.ps1"
echo         foreach ($line in $pnpDrivers) { >> "%~dp0vmware-tools-removal.ps1"
echo             if ($line -match "oem(\d+)\.inf") { >> "%~dp0vmware-tools-removal.ps1"
echo                 $oemName = $matches[0] >> "%~dp0vmware-tools-removal.ps1"
echo                 Write-Log "Removing driver package: $oemName" >> "%~dp0vmware-tools-removal.ps1"
echo                 & pnputil /delete-driver $oemName /uninstall /force >> "%~dp0vmware-tools-removal.ps1"
echo             } >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo     # Additional method: Remove devices via PowerShell >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Removing VMware devices from Device Manager..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo     $vmwareDevices = Get-PnpDevice | Where-Object {  >> "%~dp0vmware-tools-removal.ps1"
echo         $_.FriendlyName -like "*VMware*" -or  >> "%~dp0vmware-tools-removal.ps1"
echo         $_.HardwareID -like "*VMware*" -or >> "%~dp0vmware-tools-removal.ps1"
echo         $_.InstanceId -like "*VMware*" >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo     foreach ($device in $vmwareDevices) { >> "%~dp0vmware-tools-removal.ps1"
echo         try { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Removing device: $($device.FriendlyName)" >> "%~dp0vmware-tools-removal.ps1"
echo             $device | Disable-PnpDevice -Confirm:$false >> "%~dp0vmware-tools-removal.ps1"
echo             Remove-PnpDevice -InstanceId $device.InstanceId -Confirm:$false >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo         catch { >> "%~dp0vmware-tools-removal.ps1"
echo             Write-Log "Could not remove device $($device.FriendlyName): $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo catch { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Error during device removal: $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 6: Clean up additional locations >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 6: Additional cleanup..." >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Remove VMware from startup programs >> "%~dp0vmware-tools-removal.ps1"
echo try { >> "%~dp0vmware-tools-removal.ps1"
echo     $startupLocations = @( >> "%~dp0vmware-tools-removal.ps1"
echo         "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run", >> "%~dp0vmware-tools-removal.ps1"
echo         "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run", >> "%~dp0vmware-tools-removal.ps1"
echo         "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run" >> "%~dp0vmware-tools-removal.ps1"
echo     ) >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo     foreach ($location in $startupLocations) { >> "%~dp0vmware-tools-removal.ps1"
echo         if (Test-Path $location) { >> "%~dp0vmware-tools-removal.ps1"
echo             $entries = Get-ItemProperty -Path $location >> "%~dp0vmware-tools-removal.ps1"
echo             foreach ($property in $entries.PSObject.Properties) { >> "%~dp0vmware-tools-removal.ps1"
echo                 if ($property.Value -like "*VMware*" -or $property.Value -like "*vmware*") { >> "%~dp0vmware-tools-removal.ps1"
echo                     Write-Log "Removing startup entry: $($property.Name)" >> "%~dp0vmware-tools-removal.ps1"
echo                     Remove-ItemProperty -Path $location -Name $property.Name -Force >> "%~dp0vmware-tools-removal.ps1"
echo                 } >> "%~dp0vmware-tools-removal.ps1"
echo             } >> "%~dp0vmware-tools-removal.ps1"
echo         } >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo catch { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Error cleaning startup entries: $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Remove VMware environment variables >> "%~dp0vmware-tools-removal.ps1"
echo try { >> "%~dp0vmware-tools-removal.ps1"
echo     [System.Environment]::GetEnvironmentVariables([System.EnvironmentVariableTarget]::Machine).Keys |  >> "%~dp0vmware-tools-removal.ps1"
echo     Where-Object { $_ -like "*VMware*" } |  >> "%~dp0vmware-tools-removal.ps1"
echo     ForEach-Object { >> "%~dp0vmware-tools-removal.ps1"
echo         Write-Log "Removing environment variable: $_" >> "%~dp0vmware-tools-removal.ps1"
echo         [System.Environment]::SetEnvironmentVariable($_, $null, [System.EnvironmentVariableTarget]::Machine) >> "%~dp0vmware-tools-removal.ps1"
echo     } >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo catch { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "Error removing environment variables: $($_.Exception.Message)" "WARNING" >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "=== VMware Tools removal process completed ===" >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Log file saved to: $LogPath" >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo # Step 7: Prompt for restart >> "%~dp0vmware-tools-removal.ps1"
echo Write-Log "Step 7: Restart prompt..." >> "%~dp0vmware-tools-removal.ps1"
echo Write-Host "`nVMware Tools removal completed!" -ForegroundColor Green >> "%~dp0vmware-tools-removal.ps1"
echo Write-Host "A system restart is required to complete the removal process." -ForegroundColor Yellow >> "%~dp0vmware-tools-removal.ps1"
echo. >> "%~dp0vmware-tools-removal.ps1"
echo $restart = Read-Host "`nWould you like to restart now? (Y/N)" >> "%~dp0vmware-tools-removal.ps1"
echo if ($restart -eq "Y" -or $restart -eq "y") { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "User chose to restart immediately" >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Host "Restarting in 10 seconds..." -ForegroundColor Red >> "%~dp0vmware-tools-removal.ps1"
echo     Start-Sleep -Seconds 10 >> "%~dp0vmware-tools-removal.ps1"
echo     Restart-Computer -Force >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"
echo else { >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Log "User chose to restart later" >> "%~dp0vmware-tools-removal.ps1"
echo     Write-Host "Please restart your computer manually to complete the VMware Tools removal." -ForegroundColor Yellow >> "%~dp0vmware-tools-removal.ps1"
echo } >> "%~dp0vmware-tools-removal.ps1"

echo.
echo Generated vmware-tools-removal.ps1 successfully!
echo Running VMware Tools removal script...
echo Please note: This script requires Administrator privileges.
echo.

REM Execute the PowerShell script with execution policy bypass
powershell.exe -ExecutionPolicy Bypass -File "%~dp0vmware-tools-removal.ps1"

echo.
echo Script execution completed. Check the log file at C:\VMware_Removal_Log.txt for details.
pause

