// Code generated by MockGen. DO NOT EDIT.
// Source: ./sdk/providers (interfaces: BMCProvider)
//
// Generated by this command:
//
//	mockgen -destination=api/mock/mock_bmc.go -package=mock ./sdk/providers BMCProvider
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	go_ipmi "github.com/bougou/go-ipmi"
	service "github.com/platform9/vjailbreak/pkg/vpwned/api/proto/v1/service"
	providers "github.com/platform9/vjailbreak/pkg/vpwned/sdk/providers"
	gomock "go.uber.org/mock/gomock"
)

// MockBMCProvider is a mock of BMCProvider interface.
type MockBMCProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBMCProviderMockRecorder
	isgomock struct{}
}

// MockBMCProviderMockRecorder is the mock recorder for MockBMCProvider.
type MockBMCProviderMockRecorder struct {
	mock *MockBMCProvider
}

// NewMockBMCProvider creates a new mock instance.
func NewMockBMCProvider(ctrl *gomock.Controller) *MockBMCProvider {
	mock := &MockBMCProvider{ctrl: ctrl}
	mock.recorder = &MockBMCProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBMCProvider) EXPECT() *MockBMCProviderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockBMCProvider) Connect(accessInfo providers.BMAccessInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", accessInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockBMCProviderMockRecorder) Connect(accessInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBMCProvider)(nil).Connect), accessInfo)
}

// Disconnect mocks base method.
func (m *MockBMCProvider) Disconnect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockBMCProviderMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockBMCProvider)(nil).Disconnect))
}

// GetProviderBMStatus mocks base method.
func (m *MockBMCProvider) GetProviderBMStatus() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderBMStatus")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProviderBMStatus indicates an expected call of GetProviderBMStatus.
func (mr *MockBMCProviderMockRecorder) GetProviderBMStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderBMStatus", reflect.TypeOf((*MockBMCProvider)(nil).GetProviderBMStatus))
}

// GetResourceInfo mocks base method.
func (m *MockBMCProvider) GetResourceInfo(ctx context.Context, resourceID string) (service.MachineInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceInfo", ctx, resourceID)
	ret0, _ := ret[0].(service.MachineInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceInfo indicates an expected call of GetResourceInfo.
func (mr *MockBMCProviderMockRecorder) GetResourceInfo(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceInfo", reflect.TypeOf((*MockBMCProvider)(nil).GetResourceInfo), ctx, resourceID)
}

// IsBMReady mocks base method.
func (m *MockBMCProvider) IsBMReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBMReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBMReady indicates an expected call of IsBMReady.
func (mr *MockBMCProviderMockRecorder) IsBMReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBMReady", reflect.TypeOf((*MockBMCProvider)(nil).IsBMReady))
}

// IsBMRunning mocks base method.
func (m *MockBMCProvider) IsBMRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBMRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBMRunning indicates an expected call of IsBMRunning.
func (mr *MockBMCProviderMockRecorder) IsBMRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBMRunning", reflect.TypeOf((*MockBMCProvider)(nil).IsBMRunning))
}

// ListBootSource mocks base method.
func (m *MockBMCProvider) ListBootSource(ctx context.Context, req service.ListBootSourceRequest) ([]service.BootsourceSelections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBootSource", ctx, req)
	ret0, _ := ret[0].([]service.BootsourceSelections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBootSource indicates an expected call of ListBootSource.
func (mr *MockBMCProviderMockRecorder) ListBootSource(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBootSource", reflect.TypeOf((*MockBMCProvider)(nil).ListBootSource), ctx, req)
}

// ListResources mocks base method.
func (m *MockBMCProvider) ListResources(ctx context.Context) ([]service.MachineInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", ctx)
	ret0, _ := ret[0].([]service.MachineInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockBMCProviderMockRecorder) ListResources(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockBMCProvider)(nil).ListResources), ctx)
}

// ReclaimBM mocks base method.
func (m *MockBMCProvider) ReclaimBM(ctx context.Context, req service.ReclaimBMRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReclaimBM", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReclaimBM indicates an expected call of ReclaimBM.
func (mr *MockBMCProviderMockRecorder) ReclaimBM(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReclaimBM", reflect.TypeOf((*MockBMCProvider)(nil).ReclaimBM), ctx, req)
}

// SetBM2PXEBoot mocks base method.
func (m *MockBMCProvider) SetBM2PXEBoot(ctx context.Context, resourceID string, power_cycle bool, ipmi_interface go_ipmi.Interface) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBM2PXEBoot", ctx, resourceID, power_cycle, ipmi_interface)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBM2PXEBoot indicates an expected call of SetBM2PXEBoot.
func (mr *MockBMCProviderMockRecorder) SetBM2PXEBoot(ctx, resourceID, power_cycle, ipmi_interface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBM2PXEBoot", reflect.TypeOf((*MockBMCProvider)(nil).SetBM2PXEBoot), ctx, resourceID, power_cycle, ipmi_interface)
}

// SetResourcePower mocks base method.
func (m *MockBMCProvider) SetResourcePower(ctx context.Context, resourceID string, action service.PowerStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResourcePower", ctx, resourceID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetResourcePower indicates an expected call of SetResourcePower.
func (mr *MockBMCProviderMockRecorder) SetResourcePower(ctx, resourceID, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResourcePower", reflect.TypeOf((*MockBMCProvider)(nil).SetResourcePower), ctx, resourceID, action)
}

// StartBM mocks base method.
func (m *MockBMCProvider) StartBM() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBM")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartBM indicates an expected call of StartBM.
func (mr *MockBMCProviderMockRecorder) StartBM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBM", reflect.TypeOf((*MockBMCProvider)(nil).StartBM))
}

// StopBM mocks base method.
func (m *MockBMCProvider) StopBM() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBM")
	ret0, _ := ret[0].(error)
	return ret0
}

// StopBM indicates an expected call of StopBM.
func (mr *MockBMCProviderMockRecorder) StopBM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBM", reflect.TypeOf((*MockBMCProvider)(nil).StopBM))
}

// WhoAmI mocks base method.
func (m *MockBMCProvider) WhoAmI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WhoAmI")
	ret0, _ := ret[0].(string)
	return ret0
}

// WhoAmI indicates an expected call of WhoAmI.
func (mr *MockBMCProviderMockRecorder) WhoAmI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WhoAmI", reflect.TypeOf((*MockBMCProvider)(nil).WhoAmI))
}
