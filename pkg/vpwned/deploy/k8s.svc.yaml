apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: vpwned
  name: vpwned
---
apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: vpwned-sdk
    name: vpwned-sdk
    namespace: vpwned
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: vpwned-sdk
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        labels:
          app: vpwned-sdk
      spec:
        containers:
        - image: tapassharma/vpwned:v1
          imagePullPolicy: IfNotPresent
          name: vpwned
          ports:
          - containerPort: 3001
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: vpwned-service
  namespace: vpwned
spec:
  selector:
    app: vpwned-sdk
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3001
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vpwned-ingress
  namespace: vpwned
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /sdk/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: vpwned-service
            port:
              number: 80