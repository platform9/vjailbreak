// Code generated by MockGen. DO NOT EDIT.
// Source: ../vm/vmops.go

// Package vm is a generated GoMock package.
package vm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/vmware/govmomi/vim25/types"
)

// MockVMOperations is a mock of VMOperations interface.
type MockVMOperations struct {
	ctrl     *gomock.Controller
	recorder *MockVMOperationsMockRecorder
}

// MockVMOperationsMockRecorder is the mock recorder for MockVMOperations.
type MockVMOperationsMockRecorder struct {
	mock *MockVMOperations
}

// NewMockVMOperations creates a new mock instance.
func NewMockVMOperations(ctrl *gomock.Controller) *MockVMOperations {
	mock := &MockVMOperations{ctrl: ctrl}
	mock.recorder = &MockVMOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMOperations) EXPECT() *MockVMOperationsMockRecorder {
	return m.recorder
}

// CustomQueryChangedDiskAreas mocks base method.
func (m *MockVMOperations) CustomQueryChangedDiskAreas(baseChangeID string, curSnapshot *types.ManagedObjectReference, disk *types.VirtualDisk, offset int64) (types.DiskChangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomQueryChangedDiskAreas", baseChangeID, curSnapshot, disk, offset)
	ret0, _ := ret[0].(types.DiskChangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomQueryChangedDiskAreas indicates an expected call of CustomQueryChangedDiskAreas.
func (mr *MockVMOperationsMockRecorder) CustomQueryChangedDiskAreas(baseChangeID, curSnapshot, disk, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomQueryChangedDiskAreas", reflect.TypeOf((*MockVMOperations)(nil).CustomQueryChangedDiskAreas), baseChangeID, curSnapshot, disk, offset)
}

// DeleteSnapshot mocks base method.
func (m *MockVMOperations) DeleteSnapshot(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockVMOperationsMockRecorder) DeleteSnapshot(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockVMOperations)(nil).DeleteSnapshot), name)
}

// EnableCBT mocks base method.
func (m *MockVMOperations) EnableCBT() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableCBT")
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableCBT indicates an expected call of EnableCBT.
func (mr *MockVMOperationsMockRecorder) EnableCBT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableCBT", reflect.TypeOf((*MockVMOperations)(nil).EnableCBT))
}

// GetSnapshot mocks base method.
func (m *MockVMOperations) GetSnapshot(name string) (*types.ManagedObjectReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", name)
	ret0, _ := ret[0].(*types.ManagedObjectReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockVMOperationsMockRecorder) GetSnapshot(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockVMOperations)(nil).GetSnapshot), name)
}

// GetVMInfo mocks base method.
func (m *MockVMOperations) GetVMInfo() (VMInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMInfo")
	ret0, _ := ret[0].(VMInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVMInfo indicates an expected call of GetVMInfo.
func (mr *MockVMOperationsMockRecorder) GetVMInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMInfo", reflect.TypeOf((*MockVMOperations)(nil).GetVMInfo))
}

// IsCBTEnabled mocks base method.
func (m *MockVMOperations) IsCBTEnabled() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCBTEnabled")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCBTEnabled indicates an expected call of IsCBTEnabled.
func (mr *MockVMOperationsMockRecorder) IsCBTEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCBTEnabled", reflect.TypeOf((*MockVMOperations)(nil).IsCBTEnabled))
}

// TakeSnapshot mocks base method.
func (m *MockVMOperations) TakeSnapshot(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeSnapshot", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeSnapshot indicates an expected call of TakeSnapshot.
func (mr *MockVMOperationsMockRecorder) TakeSnapshot(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeSnapshot", reflect.TypeOf((*MockVMOperations)(nil).TakeSnapshot), name)
}

// UpdateDiskInfo mocks base method.
func (m *MockVMOperations) UpdateDiskInfo(vminfo VMInfo) (VMInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDiskInfo", vminfo)
	ret0, _ := ret[0].(VMInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDiskInfo indicates an expected call of UpdateDiskInfo.
func (mr *MockVMOperationsMockRecorder) UpdateDiskInfo(vminfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDiskInfo", reflect.TypeOf((*MockVMOperations)(nil).UpdateDiskInfo), vminfo)
}
