---
import '../styles/custom.css';
// Fetch releases on the server-side
const fetchReleases = async () => {
  const latestVersion = [{
    id: 0,
    name: "v0.1.7",
    html_url: "https://github.com/platform9/vjailbreak/releases/tag/v0.1.7"
  }];

  try {
    const response = await fetch('https://api.github.com/repos/platform9/vjailbreak/releases');
    if (!response.ok) {
      console.error("Failed to fetch releases from GitHub.");
      return latestVersion;
    }
    const data = await response.json();
    return data.slice(0, 5);
  } catch (error) {
    console.error("Error fetching releases:", error);
    return latestVersion;
  }
};

const releases = await fetchReleases();
const latestRelease = releases[0]?.name || 'No releases available';
const baseURL = Astro.site || '/'; // Fallback to '/' if Astro.site is undefined
---

<!-- Dropdown -->
<div class="select-container">
  <label for="release-select" class="select-label">Latest Release:</label>
  <select id="release-select" class="release-select">
    <option>Loading releases...</option>
  </select>
</div>
<script define:vars={{
  astroBaseURL: Astro.site || '/'
}}>
  document.addEventListener('DOMContentLoaded', async () => {
    const CACHE_KEY = 'githubReleases';
    const CACHE_EXPIRY = 60 * 60 * 1000; // 1 hour
    const select = document.getElementById('release-select');

    // Check cache first
    if (typeof window !== 'undefined' && window.localStorage) {
      const cachedReleases = localStorage.getItem(CACHE_KEY);
      const cacheExpiry = localStorage.getItem(`${CACHE_KEY}_expiry`);

      if (cachedReleases && cacheExpiry && Date.now() < Number(cacheExpiry)) {
        try {
          console.debug("Reading releases from cache:", JSON.parse(cachedReleases)); // Debug log
          populateDropdown(JSON.parse(cachedReleases));
          return;
        } catch (e) {
          console.warn("Cache corrupted clearing", e);
          localStorage.removeItem(CACHE_KEY)
          localStorage.removeItem(`${CACHE_KEY}_expiry`)
        }
      }
    }

    try {
      console.debug("Fetching releases from GitHub"); // Debug log
      const response = await fetch('https://api.github.com/repos/platform9/vjailbreak/releases');
      const data = await response.json();
      const releases = data.slice(0, 5);

      // Store in cache
      if (typeof window !== 'undefined' && window.localStorage) {
        localStorage.setItem(CACHE_KEY, JSON.stringify(releases));
        localStorage.setItem(`${CACHE_KEY}_expiry`, String(Date.now() + CACHE_EXPIRY));
      }

      populateDropdown(releases);
    } catch (error) {
      console.error("Error fetching releases:", error);
      populateDropdown([{
        id: 0,
        name: "v0.1.7",
        html_url: "https://github.com/platform9/vjailbreak/releases/tag/v0.1.7"
      }]);
    }

    function populateDropdown(releases) {
      const currentURL = astroBaseURL || window.location.origin; // Use Astro.site if available
      const pathPrefix = astroBaseURL ? '/vjailbreak/release_docs/' : '/release_docs/';
      select.innerHTML = releases.map(release => {
        const nameModified = release.name.replace(/\./g, '');
        const releaseDocsURL = `${currentURL}${pathPrefix}${nameModified}/`;
        return `<option value="${releaseDocsURL}">${release.name}</option>`;
      }).join('');
      select.onchange = (e) => window.open(e.target.value, '_blank');
    }
  });
</script>
