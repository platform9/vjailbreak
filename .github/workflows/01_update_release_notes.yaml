name: Update Release Notes on PR to Main

on:
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize]  # Trigger on new PR, reopen, or code changes

jobs:
  update-release-notes:
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release-v')  # Only run if the PR is from a release branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install gh
          echo "gh cli installed"

      - name: Get release branch name
        id: get_release_branch
        run: echo "RELEASE_BRANCH=${GITHUB_HEAD_REF}" >> $GITHUB_OUTPUT
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}

      - name: Get release tag from branch name
        id: get_release_tag
        run: echo "RELEASE_TAG=${RELEASE_BRANCH#release-}" >> $GITHUB_OUTPUT
        env:
          RELEASE_BRANCH: ${{ steps.get_release_branch.outputs.RELEASE_BRANCH }}

      - name: Creating a draft release
        id: draft_release
        run: |
          DRAFT_RELEASE_ID="${{ steps.get_release_tag.outputs.RELEASE_TAG }}"
          gh release create --draft $DRAFT_RELEASE_ID --generate-notes --target ${{ steps.get_release_branch.outputs.RELEASE_BRANCH }}
          echo "DRAFT_RELEASE_ID=${DRAFT_RELEASE_ID}" >> $GITHUB_OUTPUT
        env:
          DRAFT_RELEASE_ID: ${{ steps.get_release_tag.outputs.RELEASE_TAG }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Generate release notes
        id: generate_notes
        run: |
          RELEASE_TAG="${{  steps.draft_release.outputs.DRAFT_RELEASE_ID }}"
          FILE_NAME="docs/src/content/docs/release_docs/$RELEASE_TAG.md"  # Important

          RELEASE_NOTES=$(gh release view $RELEASE_TAG --json body --template {{.body}})

          echo "Release Notes:\n$RELEASE_NOTES"

          # Check if RELEASE_NOTES is empty
          if [ -z "$RELEASE_NOTES" ]; then
            echo "No commits found since the last release. Skipping file update."
            echo "SKIP_UPDATE=true" >> $GITHUB_OUTPUT
            exit 0  # Exit gracefully without failing the action
          fi

          YOUTUBE_LINK=${{ vars.HERO_VIDEO }}  
          sed -i "s|YOUTUBE_LINK|$YOUTUBE_LINK|g" docs/src/content/docs/index.mdx

          sed -i "s|ORAS_IMAGE_VER|$RELEASE_TAG|g" docs/src/content/docs/introduction/getting_started.md

          # Add a header to the file
          echo "---" > "$FILE_NAME"
          echo "title:  $RELEASE_TAG" >> "$FILE_NAME"
          echo "description: Release Notes for $RELEASE_TAG for vJailbreak"
          echo "---" >> "$FILE_NAME"
          echo "" >> "$FILE_NAME"
          # Append the new release notes to the file
          echo "$RELEASE_NOTES" >> "$FILE_NAME"

          echo "File updated: $FILE_NAME"
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_OUTPUT
          echo "SKIP_UPDATE=false" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR with changes
        if: steps.generate_notes.outputs.SKIP_UPDATE != 'true'
        run: |
          # Configure Git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"

          # Create a new branch
          NEW_BRANCH="update-release-notes-${{ steps.get_release_tag.outputs.RELEASE_TAG }}"
          git checkout -b $NEW_BRANCH

          # Add and commit changes
          git add docs/src/content/docs/*
          git commit -m "Update release notes for ${{ steps.get_release_tag.outputs.RELEASE_TAG }}"

          # Push the new branch
          git push origin $NEW_BRANCH

          # Create a pull request
          gh pr create --base ${{ github.head_ref }} --head $NEW_BRANCH --title "Update release notes for ${{ steps.get_release_tag.outputs.RELEASE_TAG }}" --body "Automatically generated PR to update release notes"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Delete draft release
        id: delete_draft_release
        run: |
          gh release delete ${{ steps.draft_release.outputs.DRAFT_RELEASE_ID }} -y 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


