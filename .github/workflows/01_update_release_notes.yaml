name: Update Release Notes on Release Event

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'info'
        type: choice
        options:
          - info
          - warning
          - debug
      environment:
        description: 'Environment to run in'
        type: environment
        required: true
      branch:
        description: 'Branch to use'
        required: true
        default: 'gh-pages'
      release_tag:
        description: 'Manually run for a specific release tag'
        required: true
        type: text

jobs:
  update-release-notes:
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          fetch-depth: 0

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: Set Tag for Release Event
        if: github.event_name == 'release'
        id: set_release_tag
        run: echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT

      - name: Set Tag for Manual Trigger
        if: github.event_name == 'workflow_dispatch'
        id: set_manual_tag
        run: echo "tag=${{ github.event.inputs.release_tag }}" >> $GITHUB_OUTPUT

      - name: Generate Notes for New Release
        id: process_release
        run: |
          RELEASE_TAG="${{ steps.set_release_tag.outputs.tag || steps.set_manual_tag.outputs.tag }}"
          
          echo ">>> Processing new release: $RELEASE_TAG"

          RELEASE_NOTES=$(gh release view "$RELEASE_TAG" --json body --template '{{.body}}' || echo "")
          if [ -z "$RELEASE_NOTES" ]; then
            echo "No release notes found for $RELEASE_TAG, skipping."
            echo "processed_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # find the previous tag
          ALL_TAGS_SORTED=$(git tag --sort=version:refname)
          LAST_TAG=$(echo "$ALL_TAGS_SORTED" | grep -B 1 -x "$RELEASE_TAG" | head -n 1)

          if [[ -n "$LAST_TAG" && "$LAST_TAG" != "$RELEASE_TAG" ]]; then
            echo "Found previous version: $LAST_TAG. Updating version numbers in docs..."
            sed -i "s|$LAST_TAG|$RELEASE_TAG|g" docs/src/content/docs/introduction/getting_started.mdx
            sed -i "s|$LAST_TAG|$RELEASE_TAG|g" docs/src/components/githubRelease.astro
            sed -i "s|$LAST_TAG|$RELEASE_TAG|g" docs/src/content/docs/index.mdx
          fi

          # Create the new release note file
          FILE_NAME="docs/src/content/docs/release_docs/$RELEASE_TAG.md"
          mkdir -p "$(dirname "$FILE_NAME")"
          {
            echo "---"
            echo "title:  $RELEASE_TAG"
            echo "description: Release Notes for $RELEASE_TAG"
            echo "---"
            echo ""
            echo "$RELEASE_NOTES"
          } > "$FILE_NAME"
          
          echo "processed_release=true" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive and Delete Old Release Notes
        if: steps.process_release.outputs.processed_release == 'true'
        run: |
          echo "Archiving and cleaning old release notes..."
          mapfile -t ALL_VERSIONS < <(find docs/src/content/docs/release_docs -name "v*.md" -printf "%f\n" | sed -e 's/^v//' -e 's/\.md$//' | sort -V)
          mapfile -t TOP_5_ARRAY < <(printf '%s\n' "${ALL_VERSIONS[@]}" | tail -n 5)

          if [ ${#TOP_5_ARRAY[@]} -eq 0 ]; then exit 0; fi

          echo "Keeping Top 5 versions:"
          printf 'v%s\n' "${TOP_5_ARRAY[@]}"

          for v in "${ALL_VERSIONS[@]}"; do
            IS_IN_TOP_5=false
            for top_v in "${TOP_5_ARRAY[@]}"; do
              if [[ "$v" == "$top_v" ]]; then IS_IN_TOP_5=true; break; fi
            done
            if ! $IS_IN_TOP_5; then
              FILE_TO_PROCESS="docs/src/content/docs/release_docs/v${v}.md"
              if [ -f "$FILE_TO_PROCESS" ]; then
                echo "Archiving and deleting: v${v}.md"
                awk 'BEGIN { in_yaml=0 } /^---$/ { in_yaml = !in_yaml; next } in_yaml { if ($1 == "title:") { sub(/^title:[[:space:]]*v/, "## v"); print; }; next; } { sub(/^##/, "###"); print }' "$FILE_TO_PROCESS" >> docs/src/content/docs/archives/release_notes.md
                rm "$FILE_TO_PROCESS"
              fi
            fi
          done

      - name: Create PR with changes
        if: steps.process_release.outputs.processed_release == 'true'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"
          
          TIMESTAMP=$(date +%s)
          NEW_BRANCH="update-release-docs-$TIMESTAMP"
          RELEASE_TAG="${{ steps.process_release.outputs.release_tag }}"
          
          git checkout -b "$NEW_BRANCH"
          git add docs/
          
          if ! git diff --cached --quiet; then
            git commit -m "docs: Update for release $RELEASE_TAG"
            git push origin "$NEW_BRANCH"
            gh pr create --base gh-pages --head "$NEW_BRANCH" --title "docs: Update for release $RELEASE_TAG" --body "This PR was automatically generated."
          else
            echo "No changes were detected to create a pull request."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}