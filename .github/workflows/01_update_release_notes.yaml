name: Update Release Notes on PR to Main

on:
  pull_request:
    branches: [main]
    types: [closed]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'info'
        type: choice
        options:
          - info
          - warning
          - debug
      environment:
        description: 'Environment to run in'
        type: environment
        required: true
      process_all_releases:
        description: 'Process all releases (including past ones)'
        required: false
        default: 'false'
        type: boolean

jobs:
  update-release-notes:
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged && startsWith(github.head_ref, 'release-v')) ||
      (github.event_name == 'release' && github.event.release.published) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.process_all_releases == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GitHub CLI and jq
        run: |
          sudo apt-get update

          sudo apt-get install -y gh jq

      - name: Set release tag for PR
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        id: set_pr_tag
        run: |
          # Extract version from branch name (e.g., release-v1.2.3 -> v1.2.3)
          RELEASE_TAG="${GITHUB_HEAD_REF#release-}"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}

      - name: Set release tag for PR
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        id: set_pr_tag
        run: |
          # Extract version from branch name (e.g., release-v1.2.3 -> v1.2.3)
          RELEASE_TAG="${GITHUB_HEAD_REF#release-}"
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}

      - name: Process releases
        id: process_releases
        run: |
          # Function to process a single release
          process_release() {
            local RELEASE_TAG=$1
            local IS_MANUAL_TRIGGER=$2
            
            echo "Processing release: $RELEASE_TAG"
            
            # Skip if this is a manual trigger and the file already exists
            if [[ "$IS_MANUAL_TRIGGER" == "true" ]]; then
              if [ -f "docs/src/content/docs/release_docs/$RELEASE_TAG.md" ]; then
                echo "Documentation already exists for $RELEASE_TAG, skipping."
                return 0
              fi
            fi

            # Get release notes
            RELEASE_NOTES=$(gh release view $RELEASE_TAG --json body --template '{{.body}}')
            
            if [ -z "$RELEASE_NOTES" ]; then
              echo "No release notes found for $RELEASE_TAG"
              return 0
            fi

            # Get the latest tag before this release
            git fetch --tags
            LAST_TAG=$(git describe --tags --abbrev=0 --match "v*" "$RELEASE_TAG^" 2>/dev/null || echo "")
            
            # Update version references in documentation files
            if [ -n "$LAST_TAG" ]; then
              echo "Updating version references from $LAST_TAG to $RELEASE_TAG"
              if [ -f "docs/src/content/docs/introduction/getting_started.mdx" ]; then
                sed -i "s|$LAST_TAG|$RELEASE_TAG|g" "docs/src/content/docs/introduction/getting_started.mdx" || true
              fi
              if [ -f "docs/src/components/githubRelease.astro" ]; then
                sed -i "s|$LAST_TAG|$RELEASE_TAG|g" "docs/src/components/githubRelease.astro" || true
              fi
              if [ -f "docs/src/content/docs/index.mdx" ]; then
                sed -i "s|$LAST_TAG|$RELEASE_TAG|g" "docs/src/content/docs/index.mdx" || true
              fi
            fi

            # Create release notes file

            FILE_NAME="docs/src/content/docs/release_docs/$RELEASE_TAG.md"
            mkdir -p "$(dirname "$FILE_NAME")"

            echo "---" > "$FILE_NAME"
            echo "title: $RELEASE_TAG" >> "$FILE_NAME"
            echo "description: Release Notes for $RELEASE_TAG for vJailbreak" >> "$FILE_NAME"
            echo "---" >> "$FILE_NAME"
            echo "" >> "$FILE_NAME"
            echo "$RELEASE_NOTES" >> "$FILE_NAME"
            
            echo "Created documentation for $RELEASE_TAG"
            echo "PROCESSED_RELEASES=${PROCESSED_RELEASES:+$PROCESSED_RELEASES,}$RELEASE_TAG" >> $GITHUB_OUTPUT
          }

          # Export the function so it's available in subshells
          export -f process_release

          # Calculate date 3 months ago in ISO 8601 format
          THREE_MONTHS_AGO=$(date -d "3 months ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Fetching releases since $THREE_MONTHS_AGO"

          # Get recent releases (last 3 months)
          ALL_RELEASES=$(gh api -X GET "repos/$GITHUB_REPOSITORY/releases" --jq '.[] | select(.published_at > "'$THREE_MONTHS_AGO'") | .tag_name' | sort -V)
          echo "Found recent releases (oldest to newest): $ALL_RELEASES"
          if [ -z "$ALL_RELEASES" ]; then
            echo "No recent releases found in the last 3 months"
            exit 0
          fi
          
          echo "Found recent releases: $ALL_RELEASES"

          # Initialize output
          echo "PROCESSED_RELEASES=" >> $GITHUB_OUTPUT

          # For manual trigger with process_all_releases=true
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.process_all_releases }}" == "true" ]]; then

            echo "Processing recent releases (last 3 months)..."

            for TAG in $ALL_RELEASES; do
              process_release "$TAG" "true"
            done
          # For release events
          elif [[ "${{ github.event_name }}" == "release" && "${{ github.event.release.published }}" == "true" ]]; then
            echo "Processing new release..."
            process_release "${{ github.event.release.tag_name }}" "false"
          # For PR merges (legacy)
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Processing PR merge..."
            process_release "${{ steps.set_pr_tag.outputs.RELEASE_TAG }}" "false"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Create PR with changes
        if: steps.process_releases.outputs.PROCESSED_RELEASES != ''
        run: |
          # Configure Git
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"
          
          # Create branch name with timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          NEW_BRANCH="update-release-notes-$TIMESTAMP"
          git checkout -b $NEW_BRANCH

          # Add and commit changes

          git add docs/src/content/docs/* docs/src/components/githubRelease.astro
          if ! git diff --cached --quiet; then
            git commit -m "docs: update release notes and version references for ${{ steps.process_releases.outputs.PROCESSED_RELEASES }}"

            git push origin $NEW_BRANCH
            
            # Create PR
            gh pr create \
              --base main \
              --head $NEW_BRANCH \

              --title "Update release notes for ${{ steps.process_releases.outputs.PROCESSED_RELEASES }}" \
              --body "Automatically generated PR to update release notes and version references"

          else
            echo "No changes to commit"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
