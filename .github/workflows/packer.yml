name: Build and Push Images

on:
  push:
    branches:
      - main
      - release-*
  pull_request:
    branches:
      - main
      - release-*
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to use"
        required: true
        default: "main"

env:
  PACKER_VERSION: "latest"
  QCOW2_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak
  UI_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-ui
  V2V_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-v2v-helper
  CONTROLLER_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-controller
  VPWNED_IMG: ${{ vars.REGISTRY }}/${{ vars.REPO }}/vjailbreak-vpwned

jobs:
  determine-release:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ env.release_found }}
      tag: ${{ steps.set_env.outputs.tag }}
      ui_img: ${{ steps.set_env.outputs.ui_img }}
      v2v_img: ${{ steps.set_env.outputs.v2v_img }}
      controller_img: ${{ steps.set_env.outputs.controller_img }}
      qcow2_img: ${{ steps.set_env.outputs.qcow2_img }}
      vpwned_img: ${{ steps.set_env.outputs.vpwned_img }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Check PR Title
        id: check_pr
        run: |
          echo "PR message: ${{ github.event.pull_request.title }}"
          if [[ "${{ github.event.pull_request.title }}" == *"release"* ]]; then
            echo "Release keyword found."
            echo "release_found=true" >> $GITHUB_ENV
          else
            echo "Release keyword not found."
            echo "release_found=false" >> $GITHUB_ENV
          fi

      - name: Check if release event
        id: check_release
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "release_found=true" >> $GITHUB_ENV
          fi

      - name: Check if manual trigger
        id: check_manual
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "release_found=true" >> $GITHUB_ENV
          fi

      - name: Check if PR raised from release branch
        id: check_pr_is_from_release_branch
        if: github.event.pull_request && startsWith(github.head_ref, 'release-v')
        run: |
          echo "release_found=true" >> $GITHUB_ENV

      - name: Set environment variables for images
        id: set_env
        run: |
          # Get the branch name, remove 'refs/heads/' from github.ref
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
          GIT_SHA=$(echo "$(git rev-parse --short HEAD)")
          GIT_BRANCH=$(echo "$(git rev-parse --abbrev-ref HEAD)")
          # if its a release event bump the version and use that as tag
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # In case of release event the tag will be the next version
            # build version will be the same as tag
            TAG=${{ github.event.release.tag_name }}
            BUILD_VERSION=${TAG}
          else
            BUILD_VERSION=${{ github.run_number }}
            # build release version as version-branch-sha
            VERSION=${BUILD_VERSION}-${GIT_SHA}
            # Since this is a merge or pull-request 
            # use the TAG as the version
            TAG=${VERSION}
          fi

          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "qcow2_img=${{ env.QCOW2_IMG }}:${TAG}" >> $GITHUB_OUTPUT
          echo "ui_img=${{ env.UI_IMG }}:${TAG}" >> $GITHUB_OUTPUT
          echo "v2v_img=${{ env.V2V_IMG }}:${TAG}" >> $GITHUB_OUTPUT
          echo "controller_img=${{ env.CONTROLLER_IMG }}:${TAG}" >> $GITHUB_OUTPUT
          echo "vpwned_img=${{ env.VPWNED_IMG }}:${TAG}" >> $GITHUB_OUTPUT

  build-ui:
    runs-on: ubuntu-latest
    needs: determine-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Set environment variables
        run: |
          echo "UI_IMG=${{ needs.determine-release.outputs.ui_img }}" >> $GITHUB_ENV

      - name: Build UI image
        run: make ui

  build-v2v-helper:
    runs-on: ubuntu-latest
    needs: determine-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Set environment variables
        run: |
          echo "V2V_IMG=${{ needs.determine-release.outputs.v2v_img }}" >> $GITHUB_ENV
      - name: Install libnbd dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libguestfs-dev libnbd-dev pkg-config
      - name: Build v2v-helper image
        run: make v2v-helper

  build-controller:
    runs-on: ubuntu-latest
    needs: determine-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Set environment variables
        run: |
          echo "CONTROLLER_IMG=${{ needs.determine-release.outputs.controller_img }}" >> $GITHUB_ENV
          echo "V2V_IMG=${{ needs.determine-release.outputs.v2v_img }}" >> $GITHUB_ENV

      - name: Build controller image
        run: make -o v2v-helper vjail-controller

  build-vpwned:
    runs-on: ubuntu-latest
    needs: determine-release

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}

      - name: Set environment variables
        run: |
          echo "VPWNED_IMG=${{ needs.determine-release.outputs.vpwned_img }}" >> $GITHUB_ENV

      - name: Build vpwned image
        run: make build-vpwned

  post-build:
    runs-on: ubuntu-latest
    needs: [determine-release, build-ui, build-v2v-helper, build-controller, build-vpwned]
    if: |
      always() && 
      (needs.build-ui.result == 'success' || needs.build-ui.result == 'skipped') && 
      (needs.build-v2v-helper.result == 'success' || needs.build-v2v-helper.result == 'skipped') && 
      (needs.build-controller.result == 'success' || needs.build-controller.result == 'skipped') && 
      (needs.build-vpwned.result == 'success' || needs.build-vpwned.result == 'skipped')

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.QUAY_ROBOT_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_PASSWORD }}
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Create deploy folder
        run: mkdir -p image_builder/deploy

      - name: Set environment variables
        run: |
          echo "TAG=${{ needs.determine-release.outputs.tag }}" >> $GITHUB_ENV
          echo "UI_IMG=${{ needs.determine-release.outputs.ui_img }}" >> $GITHUB_ENV
          echo "V2V_IMG=${{ needs.determine-release.outputs.v2v_img }}" >> $GITHUB_ENV
          echo "CONTROLLER_IMG=${{ needs.determine-release.outputs.controller_img }}" >> $GITHUB_ENV
          echo "QCOW2_IMG=${{ needs.determine-release.outputs.qcow2_img }}" >> $GITHUB_ENV
          echo "VPWNED_IMG=${{ needs.determine-release.outputs.vpwned_img }}" >> $GITHUB_ENV

          if [[ "${{ needs.determine-release.outputs.is_release }}" == "true" ]]; then
            echo "release_found=true" >> $GITHUB_ENV
          else
            echo "release_found=false" >> $GITHUB_ENV
          fi

      - name: Substitue image tags in manifests
        uses: danielr1996/envsubst-action@1.0.0
        with:
          input: ./ui/deploy/ui.yaml
          output: ./image_builder/deploy/01ui.yaml

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.22.5"

      - name: Generate Controller Manifests
        run: |
          make -C ./k8s/migration/ build-installer
          cp ./k8s/migration/dist/install.yaml image_builder/deploy/00controller.yaml
          cp -r ./k8s/kube-prometheus image_builder/deploy/
      - name: setup-oras
        uses: oras-project/setup-oras@v1.2.1

      - name: Download ubuntu base image
        if: env.release_found == 'true'
        run: oras pull quay.io/platform9/vjailbreak:ubuntu-base

      - name: Enable KVM group perms
        if: env.release_found == 'true'
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up QEMU
        if: env.release_found == 'true'
        run: sudo apt-get update && sudo apt-get install qemu-system qemu-utils -y

      - name: Setup packer
        if: env.release_found == 'true'
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Run packer init
        if: env.release_found == 'true'
        id: init
        run: "packer init ./image_builder/vjailbreak-image.pkr.hcl"

      - name: Run packer validate
        if: env.release_found == 'true'
        id: validate
        run: "packer validate ./image_builder/vjailbreak-image.pkr.hcl"

      - name: setup-oras
        if: env.release_found == 'true'
        uses: oras-project/setup-oras@v1.2.1

      - name: Run packer build
        if: env.release_found == 'true'
        id: build
        run: "PACKER_LOG=1 packer build ./image_builder/vjailbreak-image.pkr.hcl"

      - name: Upload vjailbreak qcow2 to quay
        if: env.release_found == 'true'
        run: |
          oras push ${{ env.QCOW2_IMG }} \
          --artifact-type="application/qcow2" \
          ./vjailbreak_qcow2/vjailbreak-image.qcow2

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vjailbreak-yamls
          path: |
            image_builder/deploy/00controller.yaml
            image_builder/deploy/01ui.yaml
